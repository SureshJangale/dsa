class Solution {
public:
    int nextGap(int gap){
        if(gap <= 1) return 0;
        return gap/2;
    }
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1;
        int j =n-1;
        int tar = n+m-1;
        
        while (j >=0){
            if (i>=0 && nums1[i] > nums2[j]){
                nums1[tar] = nums1[i];
                tar -=1;
                i -=1;
            }
            else{
                nums1[tar] = nums2[j];
                tar -=1;
                j -=1;
            }
        }
        
        
        
        // O(nlogn)
        
        // while(i < m)
        // {
        //     int j = 0;
        //     if(nums1[i] < nums2[j])
        //     {
        //         i++;
        //     } 
        //     else
        //     {
        //         swap(nums1[i], nums2[j]);
        //         while(j < m - 1 && nums2[j] > nums2[j + 1])
        //         {
        //             swap(nums2[j], nums2[j+1]);
        //             j++;
        //         }
        //     }
        // }
        // i = 0;
        // int j = 0;
        // for(i = m; i < m+n; i++, j++)
        // {
        //     nums1[i] = nums2[j];
        // }
        // for(; i < m+n && j < n; j++, i++)
        // {
        //     nums1[i] = nums2[j];
        // }
    }
};
